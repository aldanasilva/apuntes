from numpy import euler_gamma as eg, pi
(6*131)/(6*6)+(27^2)/(6^2)
27/6
sqrt((6*131)/(6*6)+(27^2)/(6^2))
p=0.5
n=2
p*(1-p)^n+(1-p)*(-p)^n
p=0.7
p*(1-p)^n+(1-p)*(-p)^n
p*(1-p)^n+(-1)^n*(1-p)*(p)^n
p=0.5
p*(1-p)^n+(-1)^n*(1-p)*(p)^n
(163*3)/181^2
(19/12)^2
pexp(1)
pexp(1, 2)
pexp(1, 1)
pexp(1, 0.8)
pexp(1, 0.5)
pexp(1, 0.7)
32*4
63*5
16/81-64/81+64/45-128/135+128/315
128*7/3
1/5-2/9+1/9
582+627+543-217-307-250-122
1200-856
217-122
307-122
582-95-185
582-543-307
582+543-307
library(kableExtra)
?filter
?subset
knit_with_parameters("/media/andresaldana/datos/udemy/probabilidad/talleres/11-ejercicios-de-variables-aleatorias-bidimensionales-continuas.Rmd")
?plot
install.packages('rmdformats')
knit_with_parameters("/media/andresaldana/datos/udemy/estadistica-descriptiva/distribuciones-de-probabilidad.Rmd")
?rmdformats
?rmdformats::downcute
?rmdformats::
?rmdformats:
?rmdformats
?rmdformats
??rmdgormats
??rmdformats
?rmdformats::downcute
install.packages("rmdformats")
install.packages("rmdformats")
remotes::install_github("juba/rmdformats")
install.packages(remotes)
install.packages("remotes"")
2
""
install.packages("remotes")
remotes::install_github("juba/rmdformats")
remotes::install_github("juba/rmdformats")
2/sqrt(15)
sqrt(6*13.6)
sqrt(6*13.6^2)
1-pnorm(3.5721)
install.packages("combinat")
qnorm(0.025)
(2*1.959964)^2
?data.frame
install.packages("tidiverse")
install.packages("dplyr")
install.packages(data.table)
install.packages("data.table")
27/64
0.421875+0.093750+0.093750+0.062500
0.671875+0.328125
(6*15)/(18*17*16)
clear
asd
asd
as
d
1/dX1X2X3(0,0,0,10)
2/(sqrt(3)*pi)
(4/3)*PI
(4/3)*pi
3*sqrt(3)
(11/36)-(5/9)^2
-1/324
sqrt(3)
(5/6)^1
(5/6)^10
(5/6)^100
(5/6)^1000
(59/60)^1000
(599/600)^1000
(599/600)^10000
(599/600)^100000
0.999999^10
0.999999^100
0.999999^10000
0.999999^1000000
0.999999^100000000
0.999999^10000000
0.999999^1000000
0.999999^100000000000
1.00000001^10000
1.00000001^1000000
1.00000001^100000000
1.00000001^10000000000
knitr::opts_chunk$set(echo = TRUE, collapse=TRUE)
library(gtools)
library(Rlab)
M=matrix(1, nrow=3,ncol=3)
M
lower.tri(M)
upper.tri(M, TRUE)
upper.tri(M, TRUE)
library(Matrix)
triu(M)
triu(M,0)
as.matrix(triu(M))
cumsum(c(1,2,3,4,5))
cumsum(c(1,2,3,4,5))/(1:length(x))
x = c(1,2,3,4,5)
cumsum(x)/(1:length(x))
M = matrix(c(1,2,3),byrow=TRUE,ncol=3,nrow=3)
M
apply(M,1,sum)
apply(M,1,cumsum)
M = matrix(sample(c(1,2,3,4,5),100,replace=TRUE),nrow=10)
M
M>2
sum(M>2)
sum(M>3)
sum(M>1)
sum(M>0)
M-1
(M-1)>2
M[M>2]
x = rnorm(1000)
n = 1000
x = rnorm(n)
M_1 = (1/n)*sum(x)
M_2 = (1/n)*sum(x^2)
Var1 = M_2 - M_1^2
Var1
(1/n)*sum((x-mean(x))^2)
x = rexp(10000)
hist(x)
mu = mean(x)
vr = var(x)
x.s = (x-mu)/sqrt(vr)
hist(x.s)
hist(x)
hist(x.s)
h.s[50]
x.s[50]
x.s[0:50]
clear
vr
mu
sum(x^2)/length(x)
sum(x^2)/length(x)-(mu)^2
sum(x^2)/(length(x)-1)-(mu)^2
var(x)
sum(x^2)/length(x)-(mu)^2
sum((x-mu)^2)/length(x)
sum((x-mu)^2)/(length(x)-1)
sum(x^2)/(length(x)-1)-(sum(x)/(length(x)-1))^2
n = 50
p = 0.25
plot(0:100, dbinom(0:100,n,p))
x = seq(0,25,by=0.1)
y = dnorm(x,n*p,sqrt(n*p*(1-p)))
plot(x,y)
plot(0:25, dbinom(0:25,n,p))
lines(x,y,add=TRUE)
n = 1000
n = 1000
n = 1000
p=0.25
plot(0:1000, dbinom(0:1000,n,p))
plot(180:300, dbinom(180:300,n,p))
plot(180:320, dbinom(180:320,n,p))
x = seq(180,320,by=0.1)
y = dnorm(x,n*p,sqrt(n*p*(1-p)))
lines(x,y)
n = 50
p = 1/3
pbinom(14,n,p)
pbinom(20,n,p)-pbinom(9,n,p)
mu = n*p
sd = sqrt(n*p*(1-p))
pnorm(14,mu,sd)
pnorm(20,mu,sd)-pnorm(10,mu,sd)
pbinom(14+0.5,n,p)
pnorm(14+0.5,mu,sd)
pnorm(20+0.5,mu,sd)-pnorm(10+0.5,mu,sd)
pnorm(20+0.5,mu,sd)-pnorm(9+0.5,mu,sd)
n = 50
p = 1/3
pbinom(14,n,p)
pbinom(20,n,p)-pbinom(9,n,p)
pnorm(14+0.5,mu,sd)
pnorm(20+0.5,mu,sd)-pnorm(9+0.5,mu,sd)
pb = pbinom(14,n,p)
pb1 = pbinom(14,n,p)
pb2 = pbinom(20,n,p)-pbinom(9,n,p)
pn1 = pnorm(14.5,mu,sd)
pn2 = pnorm(20.5,mu,sd)-pnorm(9.5,mu,sd)
pb1
pn1
pb1-pn1
pb2
pn2
pb2-pn2
n = 100
p = 1/2
sigma = p*(1-p)
set.seed(2019)
muestra.binomial = rbinom(1000,n,p)
muestra.xnbarra = muestra.binomial/n
hist(muestra.xnbarra, freq=FALSE)
hist(muestra.xnbarra, freq=FALSE, breaks=20)
hist(muestra.xnbarra, freq=FALSE, breaks=30)
hist(muestra.xnbarra, freq=FALSE, breaks=seq(min(muestra.xnbarra)-0.01,max(muestra.xnbarra)+0.01,by=0.01))
mu = p
sigma.xnbarra = sqrt((p*(1-p))/n)
x = seq(min(muestra.xnbarra), max(muestra.xnbarra), by=0.01)
lines(x,dnorm(x,mu,sigma.xnbarra),col='red')
ls
ls = 720
ls
ppois(750,ls)-ppois(699,ls)
pnorm(750,ls,sqrt(ls))-pnorm(699,ls,sqrt(ls))
pnorm(750+0.5,ls,sqrt(ls))-pnorm(699+0.5,ls,sqrt(ls))
sqrt(ls)
pnorm(750+0.5,ls,sqrt(ls))-pnorm(699+0.5,ls,sqrt(ls))
sum((1:6)*(1/6))
sum((1:6)^2*(1/6))
EX = sum((1:6)*(1/6))
EX2 = sum((1:6)^2*(1/6))
VarX = EX2 - EX^2
VarX
35/12
1-ppois(5,2)
1-pbinom(0,300,1-ppois(5,2))
p=1-ppois(5,2)
1-ppois(0,300*p)
1-(pnorm(-2,02)-pnorm(-2.47))
1-(pnorm(-2.02)-pnorm(-2.47))
1-pnorm(2.08)
pnorm(1.28)-pnorm(-2.53)
1524^2
1/(1524^2)
1524^2
1/(1/1524)^2
sqrt(1/(1/1524)^2)
1477.8-1524
1692.64-1524
1447.8-1524
install.packages('latex2exp')
?legend
qnorm(1.99/2)
pnorm(2.575829)
(1+0.99)/2
1-pnorm(-23/8)
1-pnorm(-23/2)
23/2
use_python("~/anaconda3/bin/python3")
library(reticulate)
python
python3
use_python("~/anaconda3/bin/python3", required=T)
?mtcars
str(mtcars)
table(mtcars$am)
use_python("~/anaconda3/envs/py_3_8_12/bin/python3")
reticulate::py_config()
reticulate::repl_python()
